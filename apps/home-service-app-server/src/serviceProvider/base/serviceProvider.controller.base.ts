/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceProviderService } from "../serviceProvider.service";
import { ServiceProviderCreateInput } from "./ServiceProviderCreateInput";
import { ServiceProvider } from "./ServiceProvider";
import { ServiceProviderFindManyArgs } from "./ServiceProviderFindManyArgs";
import { ServiceProviderWhereUniqueInput } from "./ServiceProviderWhereUniqueInput";
import { ServiceProviderUpdateInput } from "./ServiceProviderUpdateInput";

export class ServiceProviderControllerBase {
  constructor(protected readonly service: ServiceProviderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceProvider })
  async createServiceProvider(
    @common.Body() data: ServiceProviderCreateInput
  ): Promise<ServiceProvider> {
    return await this.service.createServiceProvider({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceProvider] })
  @ApiNestedQuery(ServiceProviderFindManyArgs)
  async serviceProviders(
    @common.Req() request: Request
  ): Promise<ServiceProvider[]> {
    const args = plainToClass(ServiceProviderFindManyArgs, request.query);
    return this.service.serviceProviders({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async serviceProvider(
    @common.Param() params: ServiceProviderWhereUniqueInput
  ): Promise<ServiceProvider | null> {
    const result = await this.service.serviceProvider({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServiceProvider(
    @common.Param() params: ServiceProviderWhereUniqueInput,
    @common.Body() data: ServiceProviderUpdateInput
  ): Promise<ServiceProvider | null> {
    try {
      return await this.service.updateServiceProvider({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServiceProvider(
    @common.Param() params: ServiceProviderWhereUniqueInput
  ): Promise<ServiceProvider | null> {
    try {
      return await this.service.deleteServiceProvider({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
