/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ServiceProvider as PrismaServiceProvider,
} from "@prisma/client";

export class ServiceProviderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceProviderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceProvider.count(args);
  }

  async serviceProviders(
    args: Prisma.ServiceProviderFindManyArgs
  ): Promise<PrismaServiceProvider[]> {
    return this.prisma.serviceProvider.findMany(args);
  }
  async serviceProvider(
    args: Prisma.ServiceProviderFindUniqueArgs
  ): Promise<PrismaServiceProvider | null> {
    return this.prisma.serviceProvider.findUnique(args);
  }
  async createServiceProvider(
    args: Prisma.ServiceProviderCreateArgs
  ): Promise<PrismaServiceProvider> {
    return this.prisma.serviceProvider.create(args);
  }
  async updateServiceProvider(
    args: Prisma.ServiceProviderUpdateArgs
  ): Promise<PrismaServiceProvider> {
    return this.prisma.serviceProvider.update(args);
  }
  async deleteServiceProvider(
    args: Prisma.ServiceProviderDeleteArgs
  ): Promise<PrismaServiceProvider> {
    return this.prisma.serviceProvider.delete(args);
  }
}
